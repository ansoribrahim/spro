openapi: "3.0.0"
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /estate:
    post:
      summary: Creates and stores a new estate in the database.
      requestBody:
        description: Estate details containing width and length.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EstateRequest"
      responses:
        '201':
          description: Estate created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EstateResponse"
        '400':
          description: Invalid value or format received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/tree:
    post:
      summary: Stores tree data in a given estate.
      operationId: addTreeToEstate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the estate where the tree will be added.
      requestBody:
        description: Tree details containing plot coordinates (x, y) and height.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TreeRequest"
      responses:
        '201':
          description: Tree added successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TreeResponse"
        '400':
          description: Invalid value or format received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Estate not found.
  /estate/{id}/stats:
    get:
      summary: Returns the stats of the trees in the specified estate.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the estate whose tree stats will be retrieved.
      responses:
        '200':
          description: Tree stats retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EstateStatsResponse"
        '404':
          description: Estate not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /estate/{id}/drone-plan:
    get:
      summary: Returns the sum distance of the drone monitoring travel in the specified estate.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of the estate whose drone travel distance will be retrieved.
        - name: max_distance
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Maximum distance the drone can travel before landing
      responses:
        '200':
          description: Drone travel distance retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DronePlanResponse"
        '400':
          description: Invalid value received.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Estate not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    EstateRequest:
      type: object
      required:
        - width
        - length
      properties:
        width:
          type: integer
          minimum: 1
          maximum: 50000
          description: Width of the estate in 10x10m² plots (must be between 1 and 50000)
        length:
          type: integer
          minimum: 1
          maximum: 50000
          description: Length of the estate in 10x10m² plots (must be between 1 and 50000)

    EstateResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          description: UUID of the created estate

    TreeRequest:
      type: object
      required:
        - x
        - y
        - height
      properties:
        x:
          type: integer
          minimum: 1
          maximum: 50000
          description: X coordinate of the tree's plot location
        y:
          type: integer
          minimum: 1
          maximum: 50000
          description: Y coordinate of the tree's plot location
        height:
          type: integer
          minimum: 1
          maximum: 30
          description: Height of the tree in meters (must be between 1 and 30)

    TreeResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          description: UUID of the created tree

    EstateStatsResponse:
      type: object
      properties:
        count:
          type: integer
          description: The count of the trees in the estate
          example: 10
        max:
          type: integer
          description: The max height of the trees in the estate
          example: 25
        min:
          type: integer
          description: The min height of the trees in the estate
          example: 5
        median:
          type: integer
          description: The median height of the trees in the estate
          example: 15

    DronePlanResponse:
      type: object
      properties:
        distance:
          type: integer
          description: The sum of the distances traveled by the drone
          example: 100
        rest:
          type: object
          description: Coordinates where the drone will first land if max_distance is provided
          properties:
            x:
              type: integer
              description: X coordinate of the landing location
              example: 50
            y:
              type: integer
              description: Y coordinate of the landing location
              example: 50

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
