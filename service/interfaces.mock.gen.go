// Code generated by MockGen. DO NOT EDIT.
// Source: service/interfaces.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	generated "spgo/generated"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	echo "github.com/labstack/echo/v4"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// AddTreeToEstate mocks base method.
func (m *MockServiceInterface) AddTreeToEstate(ctx echo.Context, req generated.TreeRequest, id uuid.UUID) (generated.TreeResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTreeToEstate", ctx, req, id)
	ret0, _ := ret[0].(generated.TreeResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddTreeToEstate indicates an expected call of AddTreeToEstate.
func (mr *MockServiceInterfaceMockRecorder) AddTreeToEstate(ctx, req, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTreeToEstate", reflect.TypeOf((*MockServiceInterface)(nil).AddTreeToEstate), ctx, req, id)
}

// GetEstateDronePlan mocks base method.
func (m *MockServiceInterface) GetEstateDronePlan(ctx context.Context, id uuid.UUID, maxDistance *int) (generated.DronePlanResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateDronePlan", ctx, id, maxDistance)
	ret0, _ := ret[0].(generated.DronePlanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateDronePlan indicates an expected call of GetEstateDronePlan.
func (mr *MockServiceInterfaceMockRecorder) GetEstateDronePlan(ctx, id, maxDistance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateDronePlan", reflect.TypeOf((*MockServiceInterface)(nil).GetEstateDronePlan), ctx, id, maxDistance)
}

// GetEstateStats mocks base method.
func (m *MockServiceInterface) GetEstateStats(ctx context.Context, id uuid.UUID) (generated.EstateStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateStats", ctx, id)
	ret0, _ := ret[0].(generated.EstateStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateStats indicates an expected call of GetEstateStats.
func (mr *MockServiceInterfaceMockRecorder) GetEstateStats(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateStats", reflect.TypeOf((*MockServiceInterface)(nil).GetEstateStats), ctx, id)
}

// PostEstate mocks base method.
func (m *MockServiceInterface) PostEstate(ctx context.Context, req generated.EstateRequest) (generated.EstateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostEstate", ctx, req)
	ret0, _ := ret[0].(generated.EstateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostEstate indicates an expected call of PostEstate.
func (mr *MockServiceInterfaceMockRecorder) PostEstate(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostEstate", reflect.TypeOf((*MockServiceInterface)(nil).PostEstate), ctx, req)
}
